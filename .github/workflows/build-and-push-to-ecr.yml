# 워크플로우의 최상단에 위치하며, GitHub Actions UI의 워크플로우 목록에 표시될 이름입니다.
# 이모지를 사용하여 다른 워크플로우와 시각적으로 구분합니다.
name: "🚀 [Backend] Build, Push to ECR & Deploy via Terraform"

# 'run-name'은 개별 실행(Run)의 이름을 동적으로 설정합니다.
# 이를 통해 Actions 실행 기록에서 각 배포의 목적을 한눈에 파악할 수 있습니다.
# 예: "🚀 Backend Deploy | 페르소나 기능 추가 | by @github_user"
run-name: "🚀 Backend Deploy | ${{ github.event.inputs.run_description }} | by @${{ github.actor }}"

# 'on' 섹션은 이 워크플로우가 언제 실행될지를 정의합니다.
on:
  # 'workflow_dispatch'는 GitHub UI에서 "Run workflow" 버튼을 눌러 수동으로 실행할 수 있게 합니다.
  workflow_dispatch:
    # 'inputs' 섹션은 수동 실행 시 사용자로부터 받을 파라미터를 정의합니다.
    inputs:
      git_ref:
        description: "빌드할 Git 참조 (브랜치, 태그 또는 커밋 SHA)"
        required: true
        default: "main"
      image_tag_suffix:
        description: "이미지 태그에 추가할 접미사 (선택 사항)"
        required: false
        default: ""
      run_description:
        description: "💬 이 배포의 목적을 입력하세요 (예: 페르소나 기능 추가)"
        required: true
        default: "Regular Manual Deployment"

# 'permissions'는 이 워크플로우가 GitHub API와 상호작용하기 위해 필요한 권한을 정의합니다.
permissions:
  id-token: write # AWS OIDC 인증을 위해 ID 토큰을 발급받을 권한
  contents: read # 리포지토리 코드를 읽을(checkout) 권한

# 'env'는 이 워크플로우의 모든 잡(job)에서 공통적으로 사용할 환경 변수를 설정합니다.
# GitHub Secrets를 사용하여 민감한 정보를 안전하게 관리합니다.
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY_URL: ${{ secrets.ECR_REPOSITORY_URL }} # FastAPI 앱 이미지를 저장할 ECR 리포지토리의 전체 URL

# 'jobs'는 워크플로우를 구성하는 실제 작업 단위들을 정의합니다.
jobs:
  # 첫 번째 잡: 코드를 빌드하고 Docker 이미지를 ECR에 푸시합니다.
  build_and_push_to_ecr:
    name: 1. Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout code from specified ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_ref }} # 사용자가 입력한 Git 참조를 사용합니다.

      # 2. 이미지 태그 생성
      # 타임스탬프와 커밋 해시를 조합하여 고유하고 추적 가능한 이미지 태그를 만듭니다.
      - name: Generate image tag
        id: generate_tag
        run: |
          timestamp_sha=$(date +%Y%m%d%H%M%S)-$(echo $GITHUB_SHA | cut -c1-7)
          suffix="${{ github.event.inputs.image_tag_suffix }}"
          if [ -n "$suffix" ]; then
            echo "tag=${timestamp_sha}-${suffix}" >> $GITHUB_OUTPUT
          else
            echo "tag=${timestamp_sha}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # 3. ECR URL에서 리포지토리 이름 추출
      # 전체 ECR URL에서 리포지토리 이름만 분리하여 다음 단계에서 사용합니다.
      - name: Extract ECR Repository Name from URL
        id: extract_repo_name
        run: echo "repo_name=$(echo $ECR_REPOSITORY_URL | cut -d'/' -f2)" >> $GITHUB_OUTPUT
        shell: bash

      # 4. AWS 자격 증명 설정 (OIDC 방식)
      # Access Key를 직접 사용하지 않고, GitHub Actions와 AWS 간의 신뢰 관계를 통해
      # 임시 자격 증명을 안전하게 발급받습니다.
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_ARN }} # 이 워크플로우가 위임받을 IAM 역할의 ARN
          aws-region: ${{ env.AWS_REGION }}

      # 5. Amazon ECR 로그인
      # 위에서 얻은 AWS 자격 증명을 사용하여 ECR에 로그인합니다.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6. Docker 이미지 빌드, 태그 지정 및 ECR에 푸시
      - name: Build, tag, and push image to Amazon ECR
        id: push_image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_NAME: ${{ steps.extract_repo_name.outputs.repo_name }}
          IMAGE_TAG: ${{ steps.generate_tag.outputs.tag }}
        run: |
          set -e # 스크립트 실행 중 오류가 발생하면 즉시 중단합니다.

          IMAGE_URI_WITH_TAG="$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG"
          LATEST_TAG_URI="$ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest"

          echo "🚀 Building image: $IMAGE_URI_WITH_TAG"
          docker build -t "$IMAGE_URI_WITH_TAG" .

          echo "🏷️ Tagging image as 'latest'..."
          docker tag "$IMAGE_URI_WITH_TAG" "$LATEST_TAG_URI"

          echo "📦 Pushing versioned image to ECR: $IMAGE_TAG"
          docker push "$IMAGE_URI_WITH_TAG"

          echo "📦 Pushing 'latest' tag to ECR..."
          docker push "$LATEST_TAG_URI"

          echo "✅ Successfully pushed images."

          # 다음 잡(job)으로 이미지 URI를 전달하기 위해 파일에 저장합니다.
          printf "%s" "$IMAGE_URI_WITH_TAG" > image_uri.txt

      # 7. 이미지 URI를 아티팩트로 업로드
      # 'build' 잡과 'deploy' 잡은 다른 러너(runner)에서 실행될 수 있으므로,
      # 아티팩트를 통해 파일(image_uri.txt)을 전달해야 합니다.
      - name: Upload image URI as artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-uri-artifact
          path: image_uri.txt

  # 두 번째 잡: Terraform Cloud에 배포를 요청합니다.
  deploy_via_terraform_cloud:
    name: 2. Trigger Terraform Cloud Deployment
    runs-on: ubuntu-latest
    needs: build_and_push_to_ecr # 'build_and_push_to_ecr' 잡이 성공해야 이 잡이 실행됩니다.

    steps:
      # 1. 이전 잡에서 업로드한 아티팩트 다운로드
      - name: Download image URI artifact
        uses: actions/download-artifact@v4
        with:
          name: image-uri-artifact

      # 2. 아티팩트 파일에서 이미지 URI를 읽어 환경 변수로 설정
      - name: Read image URI from artifact
        id: set_image_uri_env
        run: |
          TRIMMED_URI=$(cat image_uri.txt | xargs) # 공백 제거
          echo "NEW_IMAGE_URI_FOR_PAYLOAD=$TRIMMED_URI" >> $GITHUB_ENV
          echo "Image URI for Terraform Cloud: [$TRIMMED_URI]"

      # 3. Terraform Cloud에 배포(Run) 요청
      - name: Trigger Terraform Cloud Run
        env:
          TFC_API_TOKEN: ${{ secrets.TFC_API_TOKEN }}
          TFC_WORKSPACE_ID: ${{ secrets.TFC_WORKSPACE_ID }}
          TFC_ORGANIZATION_NAME: ${{ secrets.TFC_ORGANIZATION_NAME }}
        run: |
          set -e

          # Terraform Cloud API에 보낼 JSON 페이로드(payload)를 생성합니다.
          # 이 페이로드에는 배포 메시지와, Terraform 변수로 전달할 새 이미지 URI가 포함됩니다.
          echo "🏗️ Constructing PAYLOAD for Terraform Cloud API..."
          PAYLOAD=$(jq -n \
            --arg msg "Deploying new image via GitHub Actions: ${NEW_IMAGE_URI_FOR_PAYLOAD}" \
            --arg image_uri_for_tf_var "${NEW_IMAGE_URI_FOR_PAYLOAD}" \
            --arg workspace_id_value "${TFC_WORKSPACE_ID}" \
            '{
              "data": {
                "attributes": {
                  "message": $msg,
                  "is-destroy": false,
                  "variables": [
                    {
                      "key": "custom_fastapi_docker_image",
                      "value": ($image_uri_for_tf_var | tojson),
                      "category": "terraform",
                      "hcl": true,
                      "sensitive": false
                    }
                  ]
                },
                "type": "runs",
                "relationships": {
                  "workspace": {
                    "data": {
                      "type": "workspaces",
                      "id": $workspace_id_value
                    }
                  }
                }
              }
            }')

          # curl을 사용하여 Terraform Cloud API에 POST 요청을 보냅니다.
          echo "📡 Sending API Request to Terraform Cloud..."
          API_RESPONSE=$(curl -sS --request POST \
            --header "Authorization: Bearer $TFC_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            --data "$PAYLOAD" \
            https://app.terraform.io/api/v2/runs)

          # API 응답을 확인하여 성공 여부를 판단합니다.
          if echo "$API_RESPONSE" | jq -e .data.id > /dev/null; then
            RUN_ID=$(echo "$API_RESPONSE" | jq -r .data.id)
            echo "✅ Successfully triggered a new run in Terraform Cloud."
            echo "Terraform Cloud Run ID: $RUN_ID"
            echo "View the run here: https://app.terraform.io/app/${TFC_ORGANIZATION_NAME}/workspaces/${TFC_WORKSPACE_ID}/runs/${RUN_ID}"
          else
            echo "::error:: Failed to trigger a new run in Terraform Cloud."
            echo "API Response: $API_RESPONSE"
            exit 1
          fi
