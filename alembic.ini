# 일반적인 단일 데이터베이스 설정입니다.

[alembic]
# 마이그레이션 스크립트 경로입니다.
# 일반적으로 POSIX 형식(예: 슬래시 '/')으로 지정된 경로이며,
# 이 ini 파일의 위치를 가리키는 %(here)s 토큰에 상대적인 경로 형식입니다.
script_location = %(here)s/alembic

# 마이그레이션 파일 이름을 생성하는 데 사용되는 템플릿입니다. 기본값은 %%(rev)s_%%(slug)s 입니다.
# 파일 이름 앞에 날짜와 시간을 추가하고 싶다면 아래 줄의 주석을 해제하세요.
# 사용 가능한 모든 토큰에 대한 정보는 다음 링크를 참조하세요:
# https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path 경로입니다. 이 경로가 설정되어 있으면 sys.path의 맨 앞에 추가됩니다.
# 기본값은 현재 작업 디렉토리입니다. 여러 경로를 지정할 경우, 경로 구분자는
# 아래의 "path_separator" 설정으로 정의됩니다.
prepend_sys_path = .


# 마이그레이션 파일 내의 날짜와 파일 이름에 날짜를 표시할 때 사용할 시간대입니다.
# 시간대를 지정하려면 python>=3.9 또는 backports.zoneinfo 라이브러리와 tzdata 라이브러리가 필요합니다.
# 필요한 종속성은 pip 요구사항에 `alembic[tz]`를 추가하여 설치할 수 있습니다.
# 문자열 값은 ZoneInfo()로 전달됩니다.
# 로컬 시간을 사용하려면 비워두세요.
# timezone =

# "slug" 필드에 적용할 최대 문자 길이입니다.
# truncate_slug_length = 40

# 'revision' 명령 실행 시 autogenerate 사용 여부와 관계없이
# 환경을 실행하려면 'true'로 설정하세요.
# revision_environment = false

# 소스 .py 파일이 없는 .pyc 및 .pyo 파일을
# versions/ 디렉토리 내에서 리비전으로 감지하도록 허용하려면 'true'로 설정하세요.
# sourceless = false

# 버전 위치 지정입니다. 기본값은
# <script_location>/versions 입니다. 여러 버전 디렉토리를 사용하는 경우,
# 초기 리비전은 --version-path 옵션으로 지정해야 합니다.
# 여기서 사용되는 경로 구분자는 아래 "path_separator"에서 지정한 구분자여야 합니다.
# version_locations = %(here)s/bar:%(here)s/bat:%(here)s/alembic/versions

# 경로 구분자(path_separator)입니다. 이 설정은 configparser 파일(예: alembic.ini) 내에서
# version_locations 및 prepend_sys_path를 포함한 파일 경로 목록을 분리하는 데 사용되는 문자를 나타냅니다.
# 새로운 alembic.ini 파일에서 기본적으로 렌더링되는 값은 "os"이며, 이는 os.pathsep를 사용하여
# OS에 종속적인 경로 분할을 제공합니다.
#
# 참고: 레거시 alembic.ini 파일을 지원하기 위해, path_separator가 alembic.ini에 없는 경우
# 이 기본값은 적용되지 않습니다. 이 옵션이 완전히 생략된 경우,
# 폴백(fallback) 로직은 다음과 같습니다:
#
# 1. version_locations 옵션 파싱은 레거시 "version_path_separator" 키를 사용하도록 폴백됩니다.
#    이 키가 없으면 공백 및/또는 쉼표로 분할하는 레거시 동작으로 폴백됩니다.
# 2. prepend_sys_path 옵션 파싱은 공백, 쉼표 또는 콜론으로 분할하는
#    레거시 동작으로 폴백됩니다.
#
# path_separator에 유효한 값은 다음과 같습니다:
#
# path_separator = :
# path_separator = ;
# path_separator = space
# path_separator = newline
#
# os.pathsep를 사용합니다. 새 프로젝트에 사용되는 기본 설정입니다.
path_separator = os

# 각 "version_locations" 디렉토리에서 소스 파일을 재귀적으로 검색하려면 'true'로 설정하세요.
# Alembic 버전 1.10의 새로운 기능입니다.
# recursive_version_locations = false

# script.py.mako에서 리비전 파일을 작성할 때 사용되는 출력 인코딩입니다.
# output_encoding = utf-8

# SQLAlchemy 데이터베이스 URL입니다.
# 프로덕션 환경에서는 이 값을 직접 하드코딩하는 대신,
# 환경 변수에서 읽어오도록 env.py 파일을 수정하는 것이 더 좋습니다.
# 하지만 초기 설정에서는 직접 입력하거나, .env 파일의 값을 참조할 수 있도록 합니다.
# 여기서는 docker-compose.yml 및 .env.example과 동일한 값을 사용합니다.
sqlalchemy.url = postgresql://dev_user:dev_password@db:5432/dev_db


[post_write_hooks]
# post_write_hooks는 새로 생성된 리비전 스크립트에 대해 실행되는
# 스크립트 또는 Python 함수를 정의합니다. 자세한 내용과 예제는 문서를 참조하세요.

# "black"을 사용하여 포맷합니다 - "black" 엔트리포인트에 대해 console_scripts 러너를 사용합니다.
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# "ruff"를 사용하여 린트하고 수정을 시도합니다 - exec 러너를 사용하며, 실행 파일을 실행합니다.
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# 로깅 설정입니다. 이 설정은 사용자가 관리하는 env.py 스크립트에서만 사용됩니다.
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S